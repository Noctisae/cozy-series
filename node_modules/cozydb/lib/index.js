// Generated by CoffeeScript 1.8.0
(function() {
  var Controller, CozyModel, Model, NoSchema, api, defaultRequests, defineRequests, emit, forceIndexRequests, getRequests, log, maybeSetupPouch, requestsIndexingCallbacks, requestsIndexingProgress, requestsIndexingTotal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  log = require('printit')({
    date: true,
    prefix: 'Cozy DB'
  });

  module.exports.Model = Model = require('./model');

  module.exports.CozyModel = CozyModel = require('./cozymodel');

  module.exports.SimpleController = Controller = require('./controller');

  NoSchema = require('./utils/type_checking').NoSchema;

  module.exports.NoSchema = NoSchema;

  emit = function() {};

  module.exports.defaultRequests = defaultRequests = {
    all: function(doc) {
      return emit(doc._id, doc);
    },
    tags: function(doc) {
      var tag, _i, _len, _ref, _results;
      _ref = doc.tags || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        _results.push(emit(tag, doc));
      }
      return _results;
    },
    by: function(field) {
      return (function(doc) {
        return emit(doc.FIELD, doc);
      }).toString().replace('FIELD', field);
    }
  };

  module.exports.getModel = function(name, schema) {
    var ClassFromGetModel, klass;
    klass = ClassFromGetModel = (function(_super) {
      __extends(ClassFromGetModel, _super);

      function ClassFromGetModel() {
        return ClassFromGetModel.__super__.constructor.apply(this, arguments);
      }

      ClassFromGetModel.schema = schema;

      return ClassFromGetModel;

    })(CozyModel);
    klass.displayName = klass.name = name;
    klass.toString = function() {
      return "" + name + "Constructor";
    };
    klass.docType = name;
    return klass;
  };

  module.exports.api = api = require('./api');

  maybeSetupPouch = function(options) {
    var Pouch, PouchModel;
    if (process.env.RUN_STANDALONE || options.db || options.dbName) {
      Pouch = require('pouchdb');
      PouchModel = require('./pouchmodel');
      module.exports.CozyModel = CozyModel = PouchModel;
      if (options.db) {
        return PouchModel.db = options.db;
      } else {
        if (options.dbName == null) {
          options.dbName = process.env.POUCHDB_NAME || 'cozy';
        }
        return PouchModel.db = new Pouch(options.dbName);
      }
    }
  };

  getRequests = function(root) {
    var docType, model, modelPath, requestDefinition, requestDefinitions, requestName, requests, requestsToSave;
    modelPath = "" + root + "/server/models/";
    requests = require(modelPath + "requests");
    requestsToSave = [];
    for (docType in requests) {
      requestDefinitions = requests[docType];
      model = require(modelPath + docType);
      for (requestName in requestDefinitions) {
        requestDefinition = requestDefinitions[requestName];
        requestsToSave.push({
          model: model,
          requestName: requestName,
          requestDefinition: requestDefinition
        });
      }
    }
    requestsToSave.push({
      model: api.CozyInstance,
      optional: true,
      requestName: 'all',
      requestDefinition: defaultRequests.all
    });
    requestsToSave.push({
      model: api.CozyUser,
      optional: true,
      requestName: 'all',
      requestDefinition: defaultRequests.all
    });
    return requestsToSave;
  };

  defineRequests = function(requestsToSave, callback, i) {
    var model, optional, requestDefinition, requestName, _ref;
    if (i == null) {
      i = 0;
    }
    _ref = requestsToSave[i], model = _ref.model, requestName = _ref.requestName, requestDefinition = _ref.requestDefinition, optional = _ref.optional;
    log.info("" + (model.getDocType()) + " - " + requestName + " request creation...");
    return model.defineRequest(requestName, requestDefinition, function(err) {
      if (err && !optional) {
        log.raw(err);
        log.error("A request creation failed, abandon.");
        return callback(err);
      } else if (i + 1 >= requestsToSave.length) {
        log.info("requests creation completed");
        return callback(null);
      } else {
        log.info("succeeded");
        return defineRequests(requestsToSave, callback, i + 1);
      }
    });
  };

  requestsIndexingProgress = 0;

  requestsIndexingTotal = 1;

  requestsIndexingCallbacks = [];

  module.exports.getRequestsReindexingProgress = function() {
    log.warn("" + requestsIndexingProgress + " / " + requestsIndexingTotal);
    return requestsIndexingProgress / requestsIndexingTotal;
  };

  module.exports.waitReindexing = function(callback) {
    if (requestsIndexingTotal === requestsIndexingProgress) {
      return callback(null);
    } else {
      return requestsIndexingCallbacks.push(callback);
    }
  };

  forceIndexRequests = function(requestsToSave, callback, i) {
    var model, requestName, _ref;
    if (i == null) {
      i = 0;
    }
    _ref = requestsToSave[i], model = _ref.model, requestName = _ref.requestName;
    requestsIndexingTotal = requestsToSave.length;
    log.info(("" + (model.getDocType()) + " - " + requestName + " reindexing ") + ("" + requestsIndexingProgress + "/" + requestsIndexingTotal));
    return model.rawRequest(requestName, {
      limit: 1
    }, function(err) {
      var cb, _i, _len, _results;
      if (err && err.code === 'ECONNRESET') {
        log.info(" Timedout");
        return setTimeout(function() {
          return forceIndexRequests(requestsToSave, callback, i);
        }, 4000);
      } else if (i + 1 >= requestsToSave.length) {
        requestsIndexingProgress++;
        log.info(" requests reindexing complete");
        callback(null);
        _results = [];
        for (_i = 0, _len = requestsIndexingCallbacks.length; _i < _len; _i++) {
          cb = requestsIndexingCallbacks[_i];
          _results.push(cb(null));
        }
        return _results;
      } else {
        requestsIndexingProgress++;
        log.info(" succeeded");
        return forceIndexRequests(requestsToSave, callback, i + 1);
      }
    });
  };

  module.exports.configure = function(options, app, callback) {
    var err, requestsToSave;
    if (callback == null) {
      callback = function() {};
    }
    if (typeof options === 'string') {
      options = {
        root: options
      };
    }
    try {
      maybeSetupPouch(options);
    } catch (_error) {
      err = _error;
      console.log("Fail to init pouchdb, did you install it ?");
      console.log(err.stack);
      return callback(err);
    }
    api.setupModels();
    try {
      requestsToSave = getRequests(options.root);
    } catch (_error) {
      err = _error;
      log.raw(err.stack);
      log.error("Failed to load requests file.");
      return callback(err);
    }
    return defineRequests(requestsToSave, function(err) {
      var reindex;
      if (err) {
        return callback(err);
      }
      reindex = forceIndexRequests.bind(null, requestsToSave);
      module.exports.forceReindexing = reindex;
      return callback(null);
    });
  };

}).call(this);
